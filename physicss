import pygame
import sys
import numpy as np
import random

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 1200, 800
FPS = 60
GRAVITY = 9.8
WIND_FORCE = 0.5
MASS = 5.0
TRAIL_FADE_RATE = 15
ELASTICITY = 0.9

# Colors
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
BLACK = (0, 0, 0)
SEMI_TRANSPARENT_BLACK = (0, 0, 0, 150)
RANDOM_COLORS = [(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)) for _ in range(10)]

# Screen setup
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Advanced Physics Simulator")

# Fonts
pygame.font.init()
font = pygame.font.SysFont("Arial", 20)

# Gradient Background
def draw_gradient_background(color1, color2):
    for i in range(HEIGHT):
        blend = i / HEIGHT
        r = int(color1[0] * (1 - blend) + color2[0] * blend)
        g = int(color1[1] * (1 - blend) + color2[1] * blend)
        b = int(color1[2] * (1 - blend) + color2[2] * blend)
        pygame.draw.line(screen, (r, g, b), (0, i), (WIDTH, i))

# Helper Functions
def vector_length(v):
    return np.sqrt(v[0]**2 + v[1]**2)

def normalize(v):
    length = vector_length(v)
    return v / length if length > 0 else np.array([0, 0])

# Class Definitions
class PhysicsObject:
    def __init__(self, x, y, radius, color, mass, shape='circle'):
        self.position = np.array([x, y], dtype=np.float64)
        self.velocity = np.array([0, 0], dtype=np.float64)
        self.acceleration = np.array([0, 0], dtype=np.float64)
        self.radius = radius
        self.color = color
        self.mass = mass
        self.trail = []
        self.shape = shape

    def apply_force(self, force):
        self.acceleration += force / self.mass

    def update(self):
        self.velocity += self.acceleration
        self.position += self.velocity
        self.acceleration = np.array([0, 0], dtype=np.float64)

        self.trail.append(self.position.copy())
        if len(self.trail) > 20:
            self.trail.pop(0)

    def draw(self):
        # Draw trails with fading effect
        for i, pos in enumerate(self.trail):
            alpha = max(0, 255 - TRAIL_FADE_RATE * (len(self.trail) - i))
            trail_color = (*self.color, alpha)
            pygame.draw.circle(screen, trail_color, (int(pos[0]), int(pos[1])), 5)

        # Draw the object based on its shape
        if self.shape == 'circle':
            pygame.draw.circle(screen, self.color, (int(self.position[0]), int(self.position[1])), self.radius)
        elif self.shape == 'square':
            pygame.draw.rect(screen, self.color, pygame.Rect(self.position[0] - self.radius, self.position[1] - self.radius, 2 * self.radius, 2 * self.radius))
        elif self.shape == 'triangle':
            points = [(self.position[0], self.position[1] - self.radius), 
                      (self.position[0] - self.radius, self.position[1] + self.radius),
                      (self.position[0] + self.radius, self.position[1] + self.radius)]
            pygame.draw.polygon(screen, self.color, points)

    def bounce(self):
        if self.position[0] - self.radius <= 0 or self.position[0] + self.radius >= WIDTH:
            self.velocity[0] = -self.velocity[0] * ELASTICITY
        if self.position[1] - self.radius <= 0 or self.position[1] + self.radius >= HEIGHT:
            self.velocity[1] = -self.velocity[1] * ELASTICITY

class Particle:
    def __init__(self, position, velocity, color, lifetime=30):
        self.position = np.array(position, dtype=np.float64)
        self.velocity = np.array(velocity, dtype=np.float64)
        self.color = color
        self.lifetime = lifetime

    def update(self):
        self.position += self.velocity
        self.lifetime -= 1

    def draw(self):
        if self.lifetime > 0:
            pygame.draw.circle(screen, self.color, (int(self.position[0]), int(self.position[1])), 3)

# Draw HUD (Head-Up Display)
def draw_hud(gravity, wind, elasticity):
    hud_width, hud_height = 300, 250
    hud_surface = pygame.Surface((hud_width, hud_height), pygame.SRCALPHA)
    hud_surface.fill(SEMI_TRANSPARENT_BLACK)

    controls = [
        "CONTROLS:",
        "G - Toggle Gravity",
        "W - Toggle Wind",
        "C - Add New Ball",
        "B - Add Gravity Well",
        "R - Add Repulsion Zone",
        "ESC - Quit",
        f"Gravity: {gravity:.2f}",
        f"Wind Force: {wind:.2f}",
        f"Elasticity: {elasticity:.2f}"
    ]

    for i, line in enumerate(controls):
        text = font.render(line, True, WHITE)
        hud_surface.blit(text, (10, 10 + i * 25))

    screen.blit(hud_surface, (10, 10))

# Sliders to control Gravity, Wind, and Elasticity
def draw_slider(x, y, width, value, color):
    pygame.draw.rect(screen, WHITE, pygame.Rect(x, y, width, 10))
    pygame.draw.circle(screen, color, (x + int(value * width), y + 5), 8)

# Main Game Loop
def main():
    clock = pygame.time.Clock()
    balls = [PhysicsObject(WIDTH // 2, HEIGHT // 2, 20, RED, MASS)]
    gravity_enabled = True
    wind_enabled = False
    gravity = 9.8
    wind = 0.5
    elasticity = 0.9
    particles = []

    while True:
        # Draw gradient background
        draw_gradient_background((50, 100, 200), (200, 50, 100))

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_g:
                    gravity_enabled = not gravity_enabled
                elif event.key == pygame.K_w:
                    wind_enabled = not wind_enabled
                elif event.key == pygame.K_c:
                    shape = random.choice(['circle', 'square', 'triangle'])
                    balls.append(PhysicsObject(random.randint(50, WIDTH - 50), random.randint(50, HEIGHT - 50), random.randint(15, 30), random.choice(RANDOM_COLORS), random.randint(2, 10), shape))

        # Mouse control for sliders
        mouse_x, mouse_y = pygame.mouse.get_pos()
        if pygame.mouse.get_pressed()[0]:  # Left-click to interact with sliders
            if 50 <= mouse_y <= 70:
                gravity = (mouse_x - 50) / 400.0 * 20
            elif 100 <= mouse_y <= 120:
                wind = (mouse_x - 50) / 400.0 * 2
            elif 150 <= mouse_y <= 170:
                elasticity = (mouse_x - 50) / 400.0

        # Apply physics
        for ball in balls:
            if gravity_enabled:
                ball.apply_force(np.array([0, gravity * ball.mass]))
            if wind_enabled:
                ball.apply_force(np.array([wind, 0]))

            ball.update()
            ball.bounce()
            ball.draw()

        # Draw the HUD and Sliders
        draw_hud(gravity, wind, elasticity)
        draw_slider(50, 50, 400, gravity / 20.0, BLUE)
        draw_slider(50, 100, 400, wind / 2.0, YELLOW)
        draw_slider(50, 150, 400, elasticity, RED)

        # Update particles
        for particle in particles:
            particle.update()
            particle.draw()
            if particle.lifetime <= 0:
                particles.remove(particle)

        pygame.display.flip()
        clock.tick(FPS)

if __name__ == "__main__":
    main()
